// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.

#include "gtest/gtest.h"

#include <stdint.h>
#include <memory>

#include "blapi.h"
#include "secitem.h"

class CMACTest : public ::testing::Test {
    protected:
        CMACContext *CreateWithRandomKey(int bytes) {
            unsigned char *key = PORT_NewArray(unsigned char, bytes);
            return CMAC_Create(CMAC_AES, key, bytes);
        }

        CMACContext *CreateWithKey(const unsigned char *key, int bytes) {
            return CMAC_Create(CMAC_AES, key, bytes);
        }

        bool Compare(const unsigned char *actual, const unsigned char *expected, unsigned int length) {
            return strncmp((const char *)actual, (const char *)expected, length) == 0;
        }
};

TEST_F(CMACTest, invalid_size) {
    CMACContext *ctx = CreateWithRandomKey(1);
    ASSERT_TRUE(ctx == nullptr);
}

TEST_F(CMACTest, right_size) {
    CMACContext *ctx = CreateWithRandomKey(AES_128_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);
    CMAC_Destroy(ctx, PR_TRUE);
}

/* The following tests were taken from NIST's Cryptographic Standards and
 * Guidelines page for AES-CMAC Examples with Intermediate Values. These same
 * test vectors for AES-128 can be found in RFC 4493, section 4. */

TEST_F(CMACTest, test_aes128_nist_example_1) {
    const unsigned char key[AES_128_KEY_LENGTH] = {0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C};
    CMACContext *ctx = CreateWithKey(key, AES_128_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0xBB, 0x1D, 0x69, 0x29, 0xE9, 0x59, 0x37, 0x28, 0x7F, 0xA3, 0x7D, 0x12, 0x9B, 0x75, 0x67, 0x46};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes128_nist_example_2) {
    const unsigned char key[AES_128_KEY_LENGTH] = {0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C};
    CMACContext *ctx = CreateWithKey(key, AES_128_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char plaintext[16] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A};
    CMAC_Update(ctx, plaintext, 16);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0x07, 0x0A, 0x16, 0xB4, 0x6B, 0x4D, 0x41, 0x44, 0xF7, 0x9B, 0xDD, 0x9D, 0xD0, 0x4A, 0x28, 0x7C};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes128_nist_example_3) {
    const unsigned char key[AES_128_KEY_LENGTH] = {0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C};
    CMACContext *ctx = CreateWithKey(key, AES_128_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char plaintext[20] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57};
    CMAC_Update(ctx, plaintext, 20);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0x7D, 0x85, 0x44, 0x9E, 0xA6, 0xEA, 0x19, 0xC8, 0x23, 0xA7, 0xBF, 0x78, 0x83, 0x7D, 0xFA, 0xDE};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes128_nist_example_4) {
    const unsigned char key[AES_128_KEY_LENGTH] = {0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C};
    CMACContext *ctx = CreateWithKey(key, AES_128_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char plaintext[64] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10};
    CMAC_Update(ctx, plaintext, 64);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0x51, 0xF0, 0xBE, 0xBF, 0x7E, 0x3B, 0x9D, 0x92, 0xFC, 0x49, 0x74, 0x17, 0x79, 0x36, 0x3C, 0xFE};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes192_nist_example_1) {
    const unsigned char key[AES_192_KEY_LENGTH] = {0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B};
    CMACContext *ctx = CreateWithKey(key, AES_192_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0xD1, 0x7D, 0xDF, 0x46, 0xAD, 0xAA, 0xCD, 0xE5, 0x31, 0xCA, 0xC4, 0x83, 0xDE, 0x7A, 0x93, 0x67};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes192_nist_example_2) {
    const unsigned char key[AES_192_KEY_LENGTH] = {0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B};
    CMACContext *ctx = CreateWithKey(key, AES_192_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char plaintext[16] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A};
    CMAC_Update(ctx, plaintext, 16);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0x9E, 0x99, 0xA7, 0xBF, 0x31, 0xE7, 0x10, 0x90, 0x06, 0x62, 0xF6, 0x5E, 0x61, 0x7C, 0x51, 0x84};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes192_nist_example_3) {
    const unsigned char key[AES_192_KEY_LENGTH] = {0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B};
    CMACContext *ctx = CreateWithKey(key, AES_192_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char plaintext[20] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57};
    CMAC_Update(ctx, plaintext, 20);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0x3D, 0x75, 0xC1, 0x94, 0xED, 0x96, 0x07, 0x04, 0x44, 0xA9, 0xFA, 0x7E, 0xC7, 0x40, 0xEC, 0xF8};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes192_nist_example_4) {
    const unsigned char key[AES_192_KEY_LENGTH] = {0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B};
    CMACContext *ctx = CreateWithKey(key, AES_192_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char plaintext[64] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10};
    CMAC_Update(ctx, plaintext, 64);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0xA1, 0xD5, 0xDF, 0x0E, 0xED, 0x79, 0x0F, 0x79, 0x4D, 0x77, 0x58, 0x96, 0x59, 0xF3, 0x9A, 0x11};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes256_nist_example_1) {
    const unsigned char key[AES_256_KEY_LENGTH] = {0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4};
    CMACContext *ctx = CreateWithKey(key, AES_256_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0x02, 0x89, 0x62, 0xF6, 0x1B, 0x7B, 0xF8, 0x9E, 0xFC, 0x6B, 0x55, 0x1F, 0x46, 0x67, 0xD9, 0x83};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes256_nist_example_2) {
    const unsigned char key[AES_256_KEY_LENGTH] = {0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4};
    CMACContext *ctx = CreateWithKey(key, AES_256_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char plaintext[16] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A};
    CMAC_Update(ctx, plaintext, 16);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0x28, 0xA7, 0x02, 0x3F, 0x45, 0x2E, 0x8F, 0x82, 0xBD, 0x4B, 0xF2, 0x8D, 0x8C, 0x37, 0xC3, 0x5C};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes256_nist_example_3) {
    const unsigned char key[AES_256_KEY_LENGTH] = {0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4};
    CMACContext *ctx = CreateWithKey(key, AES_256_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char plaintext[20] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57};
    CMAC_Update(ctx, plaintext, 20);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0x15, 0x67, 0x27, 0xDC, 0x08, 0x78, 0x94, 0x4A, 0x02, 0x3C, 0x1F, 0xE0, 0x3B, 0xAD, 0x6D, 0x93};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}

TEST_F(CMACTest, test_aes256_nist_example_4) {
    const unsigned char key[AES_256_KEY_LENGTH] = {0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4};
    CMACContext *ctx = CreateWithKey(key, AES_256_KEY_LENGTH);
    ASSERT_TRUE(ctx != nullptr);

    unsigned char plaintext[64] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10};
    CMAC_Update(ctx, plaintext, 64);

    unsigned char output[AES_BLOCK_SIZE];
    const unsigned char known[AES_BLOCK_SIZE] = {0xE1, 0x99, 0x21, 0x90, 0x54, 0x9F, 0x6E, 0xD5, 0x69, 0x6A, 0x2C, 0x05, 0x6C, 0x31, 0x54, 0x10};
    CMAC_Finish(ctx, output, NULL, AES_BLOCK_SIZE);

    ASSERT_TRUE(Compare(output, known, AES_BLOCK_SIZE));
    CMAC_Destroy(ctx, PR_TRUE);
}
